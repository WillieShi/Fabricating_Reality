var util = require('./util');

	// Message constructor.
var Message = util.inherit(Object, {
	/**
	 * Initializer.
	 * @param config {Object}
	 */
	_initialize: function (config) {
		config = config || {};

		this._headers = config.headers || {};
		this._charset = config.charset || 'utf8';

		this.data(config.data || new Buffer(0));
	},

	/**
	 * Get/Set the message encoding.
	 * @param [value] {string}
	 * @return {string|Object}
	 */
	charset: function (value) {
		if (util.isUndefined(value)) { // Getter.
			return this._charset;
		} else { // Setter.
			this._charset = Object(value).toString();
			return this;
		}
	},

	/**
	 * Get/Set the message data.
	 * @param [value] {string|Buffer|Array}
	 * @return {Buffer|Object}
	 */
	data: function (value) {
		if (util.isUndefined(value)) { // Getter.
			return Buffer.concat(this._data, this._length);
		} else { // Setter.
			if (!util.isArray(value)) {
				value = [ value ];
			}
			
			var charset = this._charset,
				length = 0,
				len = value.length,
				i = 0;
				
			for (; i < len; ++i) {
				if (!util.isBuffer(value[i])) {
					value[i] = util.encode(
						Object(value[i]).toString(), charset);
				}
				length += value[i].length;
			}
			
			this._data = value;
			this._length = length;
			
			return this;
		}
	},

	/**
	 * Get/Set the message header fields.
	 * @param [key] {string|Object}
	 * @param [value] {string}
	 * @return {string|Object}
	 */
	head: function (key, value) {
		var headers = this._headers;

		if (util.isUndefined(key)) { // Get all fields.
			return headers;
		} else if (util.isObject(key)) { // Set multiple fields.
			util.mix(headers, key);
			return this;
		} else if (util.isUndefined(value)) { // Get one field.
			return headers[key] || '';
		} else { // Set one field.
			headers[key] = Object(value).toString();
			return this;
		}
	},
	
	/**
	 * Convert binary data to string.
	 * @return {string}
	 */
	toString: function () {
		var charset = this._charset,
			data = this._data,
			len = data.length,
			i = 0,
			str = '';
			
		for (; i < len; ++i) {
			str += util.decode(data[i], charset);
		}
		
		return str;
	}
});

module.exports = Message;
