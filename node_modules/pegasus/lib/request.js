var util = require('./util'),
	Message = require('./message'),
	Response = require('./response');

var PATTERN_HREF =
		/^(\w+:)?(?:\/\/)?([^\/\?]+@)?([^\/\?\:]+?)?(:\d+)?(\/[^\?]*)?(\?.*)?$/,

	URL_PARTS = [
		'protocol',
		'auth',
		'host',
		'port',
		'hostname',
		'search',
		'query',
		'pathname',
		'path'
	];

/**
 * A much faster URL parser than the native one.
 * @param url {string}
 * @return {Object}
 */
function parseURL(url) {
	var re = url.match(PATTERN_HREF) || {},
		obj = {};

	obj.protocol = re[1] || '';
	obj.auth = re[2] ? re[2].split('@')[0] : '';
	obj.host = (re[3] || '') + (re[4] || '');
	obj.port = re[4] ? re[4].split(':')[1] : ''
	obj.hostname = re[3] || '';
	obj.search = re[6] || '';
	obj.query = re[6] ? parseQuery(re[6].substring(1)) : {};
	obj.pathname = re[5] || '';
	obj.path = re[5] + (re[6] || '');
	obj.href = url;

	return obj;
}

/**
 * A much faster query string parser than the native one.
 * @param query {string}
 * @return {Object}
 */
function parseQuery(query) {
	var obj = {},
		parts = query.split('&'),
		i = 0,
		len = parts.length,
		kv, k, v;

	for (; i < len; ++i) {
		kv = parts[i].split('=');
		k = kv[0];
		v = kv[1] || '';

		if (typeof obj[k] === 'undefined') {
			obj[k] = v;
		} else if (typeof obj[k] === 'string') {
			obj[k] = [ obj[k], v ];
		} else {
			obj[k].push(v);
		}
	}

	return obj;
}

// Request constructor.
var	Request = Message.extend({
	/**
	 * Initializer.
	 * @param config {Object}
	 */
	_initialize: function (config) {
		config = config || {};

		Request.superclass._initialize.call(this, config);

		this._method = config.method || 'GET';
		this._ip = config.ip || '0.0.0.0';

		this.url(config.url || '/');
	},

	/**
	 * Get/Set the request method.
	 * @param [value] {string}
	 * @return {string|Object}
	 */
	method: function (value) {
		if (value) { // Setter.
			this._method = Object(value).toString().toUpperCase();
			return this;
		} else { // Getter.
			return this._method;
		}
	},

	/**
	 * Get/Set the remote address.
	 * @param [value] {string}
	 * @return {string|Object}
	 */
	ip: function (value) {
		if (value) { // Setter.
			this._ip = value;
			return this;
		} else { // Getter.
			return this._ip;
		}
	},

	/**
	 * Get/Set the request URL.
	 * @param [value] {string}
	 * @return {string|Object}
	 */
	url: function (value) {
		var current = this._url || {};

		if (value) { // Setter.
			// Parse the full or partial URL.
			value = parseURL(value);

			var protocol = value.protocol || current.protocol || '',
				auth = value.auth || current.auth,
				hostname = value.hostname || current.hostname || '',
				port = value.port || current.port,
				host = (auth ? auth + '@' : '')
					+ hostname
					+ (port ? ':' + port : ''),
				pathname = value.pathname || current.pathname || '/',
				search = value.search || current.search || '';

			// Assemble a full URL.
			value = protocol
				+ (host ? '//' + host : '')
				+ pathname
				+ search;

			// Parse the full URL.
			this._url = parseURL(value);

			return this;
		} else { // Getter.
			return current.href || '';
		}
	}
});

// Define the URL properties Getter.
URL_PARTS.forEach(function (key) {
	Object.defineProperty(Request.prototype, key, {
		get: function () {
			return this._url[key];
		}
	});
});

module.exports = Request;
