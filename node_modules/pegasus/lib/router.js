var	util = require('./util'),
	Pipeline = require('./pipeline');

var PATTERN_MOUNT_POINT = /^([^\/]+?)?(\/.*?)?$/,

	PATTERN_GENERATOR = /^function\s?\*/;

// Router constructor.
var	Router = util.inherit(Object, {
	/**
	 * Initializer.
	 */
	_initialize: function () {
		this._pipelines = [];
	},

	/**
	 * Compile the filters.
	 * @param filters {Array}
	 * @return {Array}
	 */
	_compile: function (filters) {
		return filters.map(function (value) {
			var router, pipeline, factory, length;

			switch (util.type(value)) {
			case 'object':
				router = new Router();
				router.mount(value);
				value = function (req, res, done) {
					router.route(req, res, done);
				};
				break;
			case 'array':
				pipeline = new Pipeline({
					hostname: '*',
					pathname: '/*',
					filters: this._compile(value)
				});
				value = function (req, res, done) {
					pipeline.process(req, res, done);
				};
				break;
			case 'function':
				if (PATTERN_GENERATOR.test(value.toString())) {
					length = value.length;
					value = util.g(value);
					value._length = length + 1;
				}
				break;
			}

			return value;
		}, this);
	},

	/**
	 * Mount a new pipeline.
	 * @param point {string}
	 * @param filters {Function|Array|Object}
	 */
	mount: function (point, filters) {
		if (util.isObject(point)) { // Mount multiple pipelines.
			util.each(point, function (filters, point) {
				this.mount(point, filters);
			}, this);
		} else {
			if (!util.isArray(filters)) { // Only one filter is provided.
				filters = [ filters ];
			}

			filters = this._compile(filters);

			var pipelines = this._pipelines,
				re;

			if (re = point.match(PATTERN_MOUNT_POINT)) { // Assign.
				pipelines.push(new Pipeline({
					hostname: re[1] || '*',
					pathname: (re[2] || '/') + '*',
					filters: filters || []
				}));

				pipelines.sort(function (a, b) {
					// High priority pipeline should have lower array index.
					return a.compareTo(b);
				});
			}
		}
	},

	/**
	 * Route to a pipeline.
	 * @param req {Object}
	 * @param res {Object}
	 * @param callback {Function}
	 */
	route: function (req, res, callback) {
		var pipelines = this._pipelines,
			len = pipelines.length,
			i = 0;

		for (; i < len; ++i) {
			if (pipelines[i].match(req)) {
				return pipelines[i].process(req, res, callback);
			}
		}
		
		// None of pipelines matches.
		callback(null);
	}
});

module.exports = Router;
