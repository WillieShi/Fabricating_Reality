var util = require('./util');

/**
 * Test wildcard pattern on given value.
 * @param pattern {string}
 * @param value {string}
 * @return {boolean}
 */
var	wildcard = (function () {
	var PATTERN_SPECIAL_CHAR = /([\$\(\)\+\.\[\]\\\/\^\{\}\|])/g,
		PATTERN_QUESTION = /\?/g,
		PATTERN_ASTERISK = /\*/g,
		PATTERN_CARET = /^/,
		PATTERN_DOLLAR = /$/,
		cache = {};

	return function (pattern, value) {
		if (!cache[pattern]) {
			cache[pattern] = new RegExp(pattern
				// Escape special characters.
				.replace(PATTERN_SPECIAL_CHAR, '\\$1')
				// Change wildcard character "?" to regular expression.
				.replace(PATTERN_QUESTION, '.')
				// Change wildcard character "*" to regular expression.
				.replace(PATTERN_ASTERISK, '.*?')
				.replace(PATTERN_CARET, '^')
				.replace(PATTERN_DOLLAR, '$'));
		}
		return cache[pattern].test(value);
	};
}());

// MountPoint constructor.
var	Pipeline = util.inherit(Object, {
	/**
	 * Initializer.
	 * @param config {Object}
	 */
	_initialize: function (config) {
		this._hostname = config.hostname;
		this._pathname = config.pathname;
		this._filters = config.filters;
	},

	/**
	 * Check whether current pipeline has a higher priority.
	 * @param rival {Object}
	 * @return {number}
	 */
	compareTo: function (rival) {
		var a = this,
			b = rival;

		// Negative returning value has lower array index.
		// If a has higher array index, reutrn -1.
		// If a and b have the same priority, return 0.
		// If a has lower array index, return 1.

		// Compare hostname first.
		if (a._hostname > b._hostname) {
			return -1;
		} else if (a._hostname === b._hostname) {
			// If hostname is equal, compare pathname.
			if (a._pathname > b._pathname) {
				return -1;
			} else if (a._pathname === b._pathname) {
				// If all equal, index unchanged.
				return 0;
			} else {
				return 1;
			}
		} else {
			return 1;
		}
	},

	/**
	 * Check whether current mount point matches the request.
	 * @param req {Object}
	 * @return {boolean}
	 */
	match: function (req) {
		var hostname = req.hostname,
			pathname = req.pathname;

		// Match hostname at first.
		if (!wildcard(this._hostname, hostname)) {
			return false;
		}

		// Match pathname at last.
		if (!wildcard(this._pathname, pathname)) {
			return false;
		}

		return true;
	},

	/**
	 * Process a request.
	 * @param req {Object}
	 * @param res {Object}
	 * @param callback {Function}
	 */
	process: function (req, res, callback) {
		var queue = this._filters;
		
		(function next(i, callback) {
			while (i < queue.length) {
				var fn = queue[i++],
					length = fn._length || fn.length;
				try {
					if (length < 3) { // fn(req, res)
						fn(req, res);
					} else if (length < 4) { // fn(req, res, done)
						return fn(req, res, function (err) {
							if (err) {
								callback(err);
							} else {
								next(i, callback);
							}
						});
					} else { // fn(req, res, next, done)
						return fn(req, res, function (callback) {
							next(i, callback);
						}, callback);
					}
				} catch (err) {
					return callback(err);
				}
			}
			callback(null);
		}(0, callback));
	}
});

module.exports = Pipeline;
